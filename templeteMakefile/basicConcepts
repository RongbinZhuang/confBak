1. Rules
	1.1 explicit rules
		1.1.1 several targets
			a.o b.o:foo.c
			=
			a.o:foo.c
			b.o:foo.c
		1.1.2 several prerequisite line
			a.o:foo.c
			a.o:foo.h
			=
			a.o:foo.c foo.h
	1.2 phony targets
		1.2.1 prevent from mistaking 
			makefile can get the source file from the current directory.
			e.g.
			all:clean
			clean:
				rm -f foo.o
			if there is a file clean under the current directory,
				the second target will not process.
			so it's common to see
			.PHONY:clean
			clean:
				rm -f foo.o	
		1.2.2 make the output stucture clear
			program:step1 ...
				...
			.PHONY:step1
			step1:
				@echo step1 start
			the target step1 will always process for no prerequisite
			and then the following prereuisites of the program will process
		1.2.3 standard phony targets
			all install clean distclean info check
	1.3 vpath
		1.3.1 usage
			VPATH=src
			or
			vpath pattern directory-list
			e.g.
				vpath %.c src
				vpath %.h include
	1.4 pattern rules			
		1.4.1 normal pattern
			all the target which match the pattern will process the same rules
			e.g.:
				%.o:%.c
					commands
				foo.o:foo.c
				run the target foo.o then the commands will run
		1.4.2 static pattern rules
			$(OBJECTS):%.o:%.c
				commands
			only the target listed in the OBJECTS will process the command
	1.5 implicit rules
		check with make --print-data-base
2. variable
	=		recurive assign
	:=		immediatately replace
	?=		assign only when the variable is not defined yet
	+=		append
	local variable
		target...:variable =/:=/+=/?= value
	.VARIIABLES 
		show the list of the variables
3. function 
	define	
	...
	endef
	$(call macro-name[,param1...]) for self-define function
4. library
5. conditional and include processing
	5.1 conditional processing
		ifdef variable-name
		ifndef variable-name
		ifeq test
		ifneq test
		...
		[else]
		...
		endif
	5.2 include processing
		include filename
reference 《Managing Project with GNU Make》
